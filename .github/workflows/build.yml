name: Build

on:
  workflow_call:
    inputs:
      cache:
        description: Whether to enable caching of dependencies based on lockfile.
        default: false
        required: false
        type: boolean
      napi:
        description: Whether to generate a single Node-API binary for all versions of Node.
        default: false
        required: false
        type: boolean
      package-manager:
        description: The package manager (npm or yarn).
        default: npm
        required: false
        type: string
      postbuild:
        description: Command to run after prebuilds have been generated.
        default: ''
        required: false
        type: string
      prebuild:
        description: Command to run before prebuilds are generated.
        default: ''
        required: false
        type: string
      skip:
        description: List of jobs to skip, for example when a platform is not supported.
        default: ''
        required: false
        type: string
      target-name:
        description: Target name of the build output.
        default: addon
        required: false
        type: string
      napi-rs:
        description: Whether or not this build is for a napi-rs project.
        default: false
        required: false
        type: string
      directory-path:
        description: The path to the directory containing your build files, relative to the repo root.
        default: '.'
        required: false
        type: string
      minimum-major-version:
        description: The minimum Node.js version to build and test
        default: 12
        required: false
        type: number

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CACHE: ${{ inputs.cache }}
  NAPI: ${{ inputs.napi }}
  PACKAGE_MANAGER: ${{ inputs.package-manager }}
  POSTBUILD: ${{ inputs.postbuild }}
  PREBUILD: ${{ inputs.prebuild }}
  TARGET_NAME: ${{ inputs.target-name }}
  NAPI_RS: ${{ inputs.napi-rs }}
  DIRECTORY_PATH: ${{ inputs.directory-path }}
  NODE_VERSIONS: '>=${{ inputs.minimum-major-version }}'

jobs:
  linux-ia32:
    if: ${{ !contains(inputs.skip, 'linux-ia32') }}
    runs-on: ubuntu-latest
    name: linux-ia32
    env:
      ARCH: ia32
      DOCKER_BUILDER: rochdev/holy-node-box:12-i386
    steps:
      - uses: docker/setup-qemu-action@v2
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  linux-x64:
    if: ${{ !contains(inputs.skip, 'linux-x64') }}
    runs-on: ubuntu-latest
    container:
      image: rochdev/holy-node-box:12-amd64
    name: linux-x64
    env:
      ARCH: x64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  linux-arm64:
    if: ${{ !contains(inputs.skip, 'linux-arm64') }}
    runs-on: ubuntu-latest
    name: linux-arm64
    env:
      ARCH: arm64
      DOCKER_BUILDER: rochdev/holy-node-box:12-arm64v8
    steps:
      - uses: docker/setup-qemu-action@v2
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  linux-arm:
    if: ${{ !contains(inputs.skip, 'linux-arm') }}
    runs-on: ubuntu-latest
    name: linux-arm
    env:
      ARCH: arm
      DOCKER_BUILDER: rochdev/holy-node-box:12-arm32v7
    steps:
      - uses: docker/setup-qemu-action@v2
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  linuxmusl-x64:
    if: ${{ !contains(inputs.skip, 'linuxmusl-x64') }}
    runs-on: ubuntu-latest
    container:
      image: node:12.0.0-alpine
    name: linuxmusl-x64
    env:
      ARCH: x64
      LIBC: musl
    steps:
      - run: apk update && apk add bash build-base git python curl
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  # TODO: linuxmusl-arm / linuxmusl-arm64

  macos:
    strategy:
      matrix:
        arch: ['arm64', 'x64']
    if: ${{ !contains(inputs.skip, 'macos-${{ matrix.arch }}') }}
    runs-on: macos-11
    name: macos-${{ matrix.arch }}
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  windows:
    strategy:
      matrix:
        arch: ['ia32', 'x64']
    if: ${{ !contains(inputs.skip, 'windows-${{ matrix.arch }}') }}
    runs-on: windows-2019
    name: windows-${{ matrix.arch }}
    env:
      ARCH: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/prebuild@main

  # Tests

  alpine-test:
    strategy:
      matrix:
        node: [12, 14, 16, 18, 20]
    needs: linuxmusl-x64
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
    name: alpine-test-${{ matrix.node }}
    steps:
      - run: apk update && apk add bash build-base git python3 curl
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/test@main
        if: matrix.node >= inputs.minimum-major-version

  linux-test:
    strategy:
      matrix:
        node: [12, 14, 16, 18, 20]
    needs: linux-x64
    runs-on: ubuntu-latest
    name: linux-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: DataDog/action-prebuildify/test@main
        if: matrix.node >= inputs.minimum-major-version

  macos-x64-test:
    strategy:
      matrix:
        node: [12, 14, 16, 18, 20]
    needs: macos
    runs-on: macos-11
    name: macos-x64-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ (env.CACHE == 'true') && env.PACKAGE_MANAGER || '' }}
      - uses: DataDog/action-prebuildify/test@main
        if: matrix.node >= inputs.minimum-major-version

  windows-test:
    strategy:
      matrix:
        node: [12, 14, 16, 18, 20]
    needs: windows
    runs-on: windows-2019
    name: windows-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ (env.CACHE == 'true') && env.PACKAGE_MANAGER || '' }}
      - uses: DataDog/action-prebuildify/test@main
        if: matrix.node >= inputs.minimum-major-version
