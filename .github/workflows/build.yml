name: Build

on:
  workflow_call:
    inputs:
      cache:
        description: Whether to enable caching of dependencies based on lockfile.
        default: false
        required: false
        type: boolean
      napi:
        description: Whether to generate a single Node-API binary for all versions of Node.
        default: false
        required: false
        type: boolean
      package-manager:
        description: The package manager (npm or yarn).
        default: npm
        required: false
        type: string
      postbuild:
        description: Command to run after prebuilds have been generated.
        default: ''
        required: false
        type: string
      prebuild:
        description: Command to run before prebuilds are generated.
        default: ''
        required: false
        type: string
      skip:
        description: List of jobs to skip, for example when a platform is not supported.
        default: ''
        required: false
        type: string
      only:
        description: List of jobs to include, for example when only a few platforms are supported.
        default: ''
        required: false
        type: string
      target-name:
        description: Target name of the build output.
        default: addon
        required: false
        type: string
      napi-rs:
        description: Whether or not this build is for a napi-rs project.
        default: false
        required: false
        type: boolean
      neon:
        description: Whether or not this build is for a Neon project.
        default: false
        required: false
        type: boolean
      rust:
        description: Whether or not this build is for a Rust project.
        default: false
        required: false
        type: boolean
      directory-path:
        description: The path to the directory containing your build files, relative to the repo root.
        default: '.'
        required: false
        type: string
      min-node-version:
        description: The minimum Node.js version to build and test
        default: 12
        required: false
        type: number

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  CACHE: ${{ inputs.cache }}
  NAPI: ${{ inputs.napi }}
  PACKAGE_MANAGER: ${{ inputs.package-manager }}
  POSTBUILD: ${{ inputs.postbuild }}
  PREBUILD: ${{ inputs.prebuild }}
  TARGET_NAME: ${{ inputs.target-name }}
  NAPI_RS: ${{ inputs.napi-rs }}
  NEON: ${{ inputs.neon }}
  RUST: ${{ inputs.rust }}
  GYP: ${{ !inputs.napi-rs && !inputs.neon && !inputs.rust }}
  DIRECTORY_PATH: ${{ inputs.directory-path }}
  NODE_VERSIONS: '>=${{ inputs.min-node-version }}'

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - id: versions
        uses: DataDog/action-prebuildify/compute-matrix@main
        with:
          min: ${{ inputs.min-node-version }}

  platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}
    steps:
      - id: platforms
        uses: DataDog/action-prebuildify/platforms@rochdev/fix-empty-prebuild-warning
        with:
          skip: ${{ inputs.skip }}
          only: ${{ inputs.only }}

  debug:
    runs-on: ubuntu-latest
    needs:
      - platforms
    steps:
      - run: |
        echo '${{ needs.platforms.outputs.platforms }}'
        echo '${{ fromJson(needs.platforms.outputs.platforms) }}'

  linux-arm:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: arm-4core-linux-arm-limited
    name: linux-arm
    needs:
      - platforms
    env:
      ARCH: arm
      DOCKER_BUILDER: rochdev/holy-node-box:12-arm32v7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm i -g yarn
      - uses: DataDog/action-prebuildify/prebuild@main

  linux-arm64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: arm-4core-linux-arm-limited
    name: linux-arm64
    needs:
      - platforms
    env:
      ARCH: arm64
      DOCKER_BUILDER: rochdev/holy-node-box:12-arm64v8
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm i -g yarn
      - uses: DataDog/action-prebuildify/prebuild@main

  linux-ia32:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: ubuntu-latest
    name: linux-ia32
    needs:
      - platforms
    env:
      ARCH: ia32
      DOCKER_BUILDER: rochdev/holy-node-box:12-i386
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  linux-x64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: ubuntu-latest
    name: linux-x64
    needs:
      - platforms
    env:
      ARCH: x64
      DOCKER_BUILDER: rochdev/holy-node-box:12-amd64
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  linuxmusl-x64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: ubuntu-latest
    container:
      # musl is statically linked so we can use more recent version of image.
      image: node:20.0.0-alpine
    name: linuxmusl-x64
    needs:
      - platforms
    env:
      ARCH: x64
      LIBC: musl
    steps:
      - run: apk update && apk add bash build-base git python3 curl tar zstd
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  linuxmusl-arm64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: arm-4core-linux-arm-limited
    name: linuxmusl-arm64
    needs:
      - platforms
    env:
      ARCH: arm64
      LIBC: musl
      DOCKER_BUILDER: uurien/node-to-build:20.0.0-alpine
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm i -g yarn
      - uses: DataDog/action-prebuildify/prebuild@main

  # TODO: linuxmusl-arm

  darwin-arm64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: macos-14
    needs:
      - platforms
    env:
      ARCH: arm64
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  darwin-x64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: macos-12
    needs:
      - platforms
    env:
      ARCH: x64
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  win32-ia32:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: windows-2019
    needs:
      - platforms
    env:
      ARCH: ia32
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  win32-x64:
    if: ${{ contains(fromJson(needs.platforms.outputs.platforms), github.job) }}
    runs-on: windows-2019
    needs:
      - platforms
    env:
      ARCH: x64
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/prebuild@main

  # Tests

  alpine-test:
    strategy:
      matrix:
        node: ${{ fromJson(needs.versions.outputs.versions) }}
    needs:
      - versions
      - prebuilds
      - linuxmusl-x64
    runs-on: ubuntu-latest
    container:
      image: node:${{ matrix.node }}-alpine
    name: alpine-test-${{ matrix.node }}
    steps:
      - run: apk update && apk add bash build-base git python3 curl
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/test@main

  linux-arm64-test:
    strategy:
      matrix:
        node: ${{ fromJson(needs.versions.outputs.versions) }}
    needs:
      - versions
      - prebuilds
      - linux-arm64
    runs-on: arm-4core-linux-arm-limited
    name: linux-arm64-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/test@main

  linux-x64-test:
    strategy:
      matrix:
        node: ${{ fromJson(needs.versions.outputs.versions) }}
    needs:
      - versions
      - prebuilds
      - linux-x64
    runs-on: ubuntu-latest
    name: linux-x64-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4
      - uses: DataDog/action-prebuildify/test@main

  darwin-x64-test:
    strategy:
      matrix:
        node: ${{ fromJson(needs.versions.outputs.versions) }}
    needs:
      - versions
      - prebuilds
      - darwin-x64
    runs-on: macos-12
    name: darwin-x64-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ (env.CACHE == 'true') && env.PACKAGE_MANAGER || '' }}

      #########################################################################
      # node-gyp < 10 is not compatible with python 3.12
      #
      # For node 16+, we need to install node-gyp@latest that is compatible
      # with python 3.12
      # Instruct npm to use the global version.
      - run: |
          npm install -g node-gyp@latest
          npm explore npm/node_modules/@npmcli/run-script -g -- npm_config_global=false npm install node-gyp@latest
        if: ${{ matrix.node > '14' }}
      # For node 14, we need to install node-gyp@9, because node-gyp@10 is not
      # compatible with node 14. By installing manually setuptools, we ensure
      # that node-gyp@9 is compatible with python 3.12.
      # Older node-gyp versions are not compatible with python 3.12 even with
      # setuptools that's why we install node-gyp@9.
      # nvm@6 refuses to use the local node-gyp version, hence we install it
      # globally and instruct npm to use the global version.
      - run: |
          npm install -g node-gyp@9
          npm config set node_gyp $(npm prefix -g)/lib/node_modules/node-gyp/bin/node-gyp.js
          pip3 install setuptools
        if: ${{ matrix.node <= '14' }}
      #########################################################################

      - uses: DataDog/action-prebuildify/test@main

  win32-test:
    strategy:
      matrix:
        node: ${{ fromJson(needs.versions.outputs.versions) }}
    needs:
      - versions
      - prebuilds
      - win32-x64
    runs-on: windows-2019
    name: win32-test-${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ (env.CACHE == 'true') && env.PACKAGE_MANAGER || '' }}
      - uses: DataDog/action-prebuildify/test@main

  # Prebuilds

  prebuilds:
    needs:
      - linux-arm
      - linux-arm64
      - linux-ia32
      - linuxmusl-x64
      - linuxmusl-arm64
      - linux-x64
      - darwin-arm64
      - darwin-x64
      - win32-ia32
      - win32-x64
    # Usage of needs implies that the job will only run if all the jobs it depends on are successful.
    # If any of the jobs it depends on is skipped, this job will be skipped.
    # To workaround this, we use the `if` condition but we also need to add `always()` to make sure the job is run
    # related to https://github.com/actions/runner/issues/2205
    if: ${{ always() && ! contains(needs.*.result, 'failure') && ! contains(needs.*.result, 'cancelled') }}
    runs-on: ubuntu-latest
    name: prebuilds
    steps:
      - uses: actions/upload-artifact/merge@v4
        with:
          name: prebuilds
          pattern: prebuilds-*
          delete-merged: true
